 # use CTRL-A as modifier
  set-option -g prefix C-a
# Support for 256 colors
  set -g default-terminal "screen-256color"
# bind vi key-mapping
  set -g status-keys vi
# vi-style controls for copy mode
  setw -g mode-keys vi
# Window index base 1
  set -g base-index 1

# Sane scrolling

set -g terminal-overrides 'xterm*:smcup@:rmcup@'
set -g mode-mouse on

#--Status-Bar-------------------------------------------------------------------
# Default colors
set -g status-bg white
set -g status-fg black
 
# Left side of status bar
set -g status-left-length 20
set -g status-left '#[fg=black][#[bg=white,fg=black]#S#[bg=white,fg=black]:#H#[fg=black]]'
 
# Inactive windows in status bar
set-window-option -g window-status-format '#[fg=white,dim]#I#[fg=black]:#[default]#W#[fg=white,dim]#F'
 
# Current or active window in status bar
#set-window-option -g window-status-current-bg yellow
#set-window-option -g window-status-current-fg black
set-window-option -g window-status-current-format '#[bg=red,fg=white,bold]#I#[bg=red,fg=white]:#[fg=white]#W#[fg=white,dim]#F'
 
 
# Right side of status bar
#set -g status-right '#[fg=yellow]#(date)'
set -g status-right '#[fg=black][#[fg=black]#T#[fg=black]][#[fg=black]%Y-%m-%d #[fg=black]%H:%M#[default]#[fg=black]]'
 






# large history
  set-option -g history-limit 100000
# highlight status bar on activity
  setw -g monitor-activity on
  set -g visual-activity on
  set -g visual-bell on
# automatically set window title
#  set -g automatic-rename

######## Bindings ########
# bind C-a to the previously active window
  bind-key C-a last-window
# force a reload of the config file
  bind r source-file ~/.tmux.conf

# split windows like vim. - Note: vim's definition of a horizontal/vertical split is reversed from tmux's
  bind s split-window -v
  bind v split-window -h

# navigate panes with hjkl
  bind h select-pane -L
  bind j select-pane -D
  bind k select-pane -U
  bind l select-pane -R

# smart pane switching with awareness of vim splits
bind -n C-h if "[ $(tmux display -p '#{pane_current_command}' | tr '[:upper:]' '[:lower:]') = vim ]" "send-keys C-h" "select-pane -L"
bind -n C-j if "[ $(tmux display -p '#{pane_current_command}' | tr '[:upper:]' '[:lower:]') = vim ]" "send-keys C-j" "select-pane -D"
bind -n C-k if "[ $(tmux display -p '#{pane_current_command}' | tr '[:upper:]' '[:lower:]') = vim ]" "send-keys C-k" "select-pane -U"
bind -n C-l if "[ $(tmux display -p '#{pane_current_command}' | tr '[:upper:]' '[:lower:]') = vim ]" "send-keys C-l" "select-pane -R"
bind -n "C-\\" if "[ $(tmux display -p '#{pane_current_command}' | tr '[:upper:]' '[:lower:]') = vim ]" "send-keys C-\\" "select-pane -l"

# easy pane nav
bind -n C-q display-panes

# resize panes like vim
  bind < resize-pane -L 10
  bind L resize-pane -L 100
  bind > resize-pane -R 10
  bind R resize-pane -R 100
  bind - resize-pane -D 5
  bind D resize-pane -D 35
  bind + resize-pane -U 5
  bind U resize-pane -U 35

# maximize current window
# http://superuser.com/questions/238702/maximizing-a-pane-in-tmux
unbind +
bind + new-window -d -n tmux-zoom 'clear && echo TMUX ZOOM && read' \; swap-pane -s tmux-zoom.0 \; select-window -t tmux-zoom
unbind -
bind - last-window \; swap-pane -s tmux-zoom.0 \; kill-window -t tmux-zoom
